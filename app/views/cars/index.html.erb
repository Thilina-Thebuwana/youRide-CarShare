<<<<<<< HEAD
<<<<<<< HEAD

<p id="notice"><%= notice %></p>

 <div class = "jumbotron">

        <h1 class="display-3">Available Cars</h1>
    </div>

<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Make</th>
      <th>Model</th>
      <th>Number plate</th>
      <th>Color</th>
      <th>Seat count</th>
      <th>Current address</th>
      <th>status</th>

      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @cars.each do |car| %>
      <tr>
        <td><%= car.name %></td>
        <td><%= car.make %></td>
        <td><%= car.model %></td>
        <td><%= car.number_plate %></td>
        <td><%= car.color %></td>
        <td><%= car.seat_count %></td>
        <td><%= car.current_address %></td>
       <td><%= car.status %></td>
        <td><%= link_to 'Show', car %></td>
        <td><%= link_to 'Edit', edit_car_path(car) %></td>
        <td><%= link_to 'Destroy', car, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>


<div id='userInfo'></div>

<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div>

<script type = "text/javascript">
    x = document.getElementById('userInfo');
    
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser";
        }
    }
    
    function showPosition(position) {
        const userLat =  position.coords.latitude;
        const userLng =  position.coords.longitude;
       // x.innerHTML = "Latitiude: " + userLat +
          //  "<br>Longitude: " + userLng;
        
    handler = Gmaps.build('Google');
handler.buildMap({
    provider: {
      disableDefaultUI: false
      // pass in other Google Maps API options here
    },
    internal: {
      id: 'map'
    }
  },
  function(){
    const markersArr = <%= raw @hash.to_json %>;
    const carDistancesFromUser = markersArr.map(c => {
        return google.maps.geometry.spherical.computeDistanceBetween(
            new google.maps.LatLng(userLat, userLng),
            new google.maps.LatLng(c.lat, c.lng)
        )
    });
    const closestDistance = Math.min(...carDistancesFromUser);
    const closestCar = markersArr[carDistancesFromUser.indexOf(closestDistance)]
    x.innerHTML = "<h1>Closest Car to you is " + closestCar.infowindow.toUpperCase() + " at " + (closestDistance/1000).toFixed(2) + "km away</h1>"
    markersArr.push({lat: userLat, lng: userLng, infowindow: 'User', picture:{ url: 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=|000000|000000' , width:75 , height: 75}});
    markers = handler.addMarkers(markersArr);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  }
);        
    }
    
    getLocation();
    
    

    
</script>

    

=======
=======
>>>>>>> mehmed

<p id="notice"><%= notice %></p>

 <div class = "jumbotron">

        <h1 class="display-3">Available Cars</h1>
    </div>

<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Make</th>
      <th>Model</th>
      <th>Number plate</th>
      <th>Color</th>
      <th>Seat count</th>
      <th>Current address</th>
      <th>status</th>

      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @cars.each do |car| %>
      <tr>
        <td><%= car.name %></td>
        <td><%= car.make %></td>
        <td><%= car.model %></td>
        <td><%= car.number_plate %></td>
        <td><%= car.color %></td>
        <td><%= car.seat_count %></td>
        <td><%= car.current_address %></td>
       <td><%= car.status %></td>
        <td><%= link_to 'Show', car %></td>
        <td><%= link_to 'Edit', edit_car_path(car) %></td>
        <td><%= link_to 'Destroy', car, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>


<div id='userInfo'></div>

<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div>

<script type = "text/javascript">
    x = document.getElementById('userInfo');
    
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser";
        }
    }
    
    function showPosition(position) {
        const userLat =  position.coords.latitude;
        const userLng =  position.coords.longitude;
       // x.innerHTML = "Latitiude: " + userLat +
          //  "<br>Longitude: " + userLng;
        
    handler = Gmaps.build('Google');
handler.buildMap({
    provider: {
      disableDefaultUI: false
      // pass in other Google Maps API options here
    },
    internal: {
      id: 'map'
    }
  },
  function(){
    const markersArr = <%= raw @hash.to_json %>;
    const carDistancesFromUser = markersArr.map(c => {
        return google.maps.geometry.spherical.computeDistanceBetween(
            new google.maps.LatLng(userLat, userLng),
            new google.maps.LatLng(c.lat, c.lng)
        )
    });
    const closestDistance = Math.min(...carDistancesFromUser);
    const closestCar = markersArr[carDistancesFromUser.indexOf(closestDistance)]
    x.innerHTML = "<h1>Closest Car to you is " + closestCar.infowindow.toUpperCase() + " at " + (closestDistance/1000).toFixed(2) + "km away</h1>"
    markersArr.push({lat: userLat, lng: userLng, infowindow: 'User', picture:{ url: 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=|000000|000000' , width:75 , height: 75}});
    markers = handler.addMarkers(markersArr);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  }
);        
    }
    
    getLocation();
    
    

    
</script>

    

<<<<<<< HEAD
>>>>>>> Connor
=======
>>>>>>> mehmed
